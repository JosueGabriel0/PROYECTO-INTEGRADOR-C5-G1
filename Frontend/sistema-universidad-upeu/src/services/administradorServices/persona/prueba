@Override
public Inscripcion crearInscripcion(Inscripcion inscripcionDTO, MultipartFile fotoPerfil) {
    Inscripcion inscripcion = new Inscripcion();

    try {
        // Verificar y asignar el Rol
        ResponseEntity<Rol> rolResponse = rolFeign.listarRolDtoPorId(inscripcionDTO.getIdRol());
        if (rolResponse.getBody() == null) {
            throw new RuntimeException("No se pudo encontrar el Rol con ID: " + inscripcionDTO.getIdRol());
        }
        inscripcionDTO.getUsuario().setIdRol(inscripcionDTO.getIdRol());

        // Crear Usuario
        ResponseEntity<Usuario> usuarioResponse = usuarioFeign.crearUsuarioDto(inscripcionDTO.getUsuario());
        if (usuarioResponse.getBody() == null) {
            throw new RuntimeException("No se pudo crear el Usuario.");
        }
        inscripcion.setIdUsuario(usuarioResponse.getBody().getIdUsuario());

        // Crear Persona y pasar el archivo de perfil
        inscripcionDTO.getPersona().setIdUsuario(usuarioResponse.getBody().getIdUsuario());
        ResponseEntity<Persona> personaResponse = personaFeign.crearPersonaDto(inscripcionDTO.getPersona(), fotoPerfil);
        if (personaResponse.getBody() == null) {
            throw new RuntimeException("No se pudo crear la Persona.");
        }
        inscripcion.setIdPersona(personaResponse.getBody().getId());

        // Verificar si se crea un Administrador, Administrativo, Estudiante o un Docente, no varios a la vez
        if(inscripcionDTO.getAdministrador() != null && inscripcionDTO.getAdministrativo() == null && inscripcionDTO.getEstudiante() == null && inscripcionDTO.getDocente() == null){
            // Crear Administrador y obtener el ID
            Administrador administrador = inscripcionDTO.getAdministrador();
            administrador.setIdPersona(inscripcion.getIdPersona()); // Asignar el ID de la Persona al Administrador
            ResponseEntity<Administrador> administradorResponse = administradorFeign.crearAdministradorDto(administrador);
            if (administradorResponse.getBody() == null) {
                throw new RuntimeException("No se pudo crear el Administrador.");
            }
            inscripcion.setIdAdministrador(administradorResponse.getBody().getIdAdministrador());

        } else if(inscripcionDTO.getAdministrativo() != null && inscripcionDTO.getAdministrador() == null && inscripcionDTO.getEstudiante() == null && inscripcionDTO.getDocente() == null){
            // Crear Administrativo y obtener el ID
            Administrativo administrativo = inscripcionDTO.getAdministrativo();
            administrativo.setIdPersona(inscripcion.getIdPersona()); // Asignar el ID de la Persona al Administrativo
            ResponseEntity<Administrativo> administrativoResponse = administrativoFeign.crearAdministrativoDto(administrativo);
            if (administrativoResponse.getBody() == null) {
                throw new RuntimeException("No se pudo crear el Administrativo.");
            }
            inscripcion.setIdAdministrativo(administrativoResponse.getBody().getIdAdministrativo());

        }else if (inscripcionDTO.getEstudiante() != null && inscripcionDTO.getAdministrador() == null && inscripcionDTO.getAdministrativo() == null && inscripcionDTO.getDocente() == null) {
            // Crear Estudiante y obtener el ID
            Estudiante estudiante = inscripcionDTO.getEstudiante();
            estudiante.setIdPersona(inscripcion.getIdPersona()); // Asignar el ID de la Persona al Estudiante
            ResponseEntity<Estudiante> estudianteResponse = estudianteFeign.crearEstudianteDto(estudiante);
            if (estudianteResponse.getBody() == null) {
                throw new RuntimeException("No se pudo crear el Estudiante.");
            }
            inscripcion.setIdEstudiante(estudianteResponse.getBody().getIdEstudiante());

        } else if (inscripcionDTO.getDocente() != null && inscripcionDTO.getAdministrador() == null && inscripcionDTO.getAdministrativo() == null && inscripcionDTO.getEstudiante() == null) {
            // Crear Docente y obtener el ID
            Docente docente = inscripcionDTO.getDocente();
            docente.setIdPersona(inscripcion.getIdPersona()); // Asignar el ID de la Persona al Docente
            ResponseEntity<Docente> docenteResponse = docenteFeign.crearDocenteDto(docente);
            if (docenteResponse.getBody() == null) {
                throw new RuntimeException("No se pudo crear el Docente.");
            }
            inscripcion.setIdDocente(docenteResponse.getBody().getIdDocente());

        } else {
            throw new RuntimeException("Debe proveerse solo un Administrador, Administrativo, Estudiante o un Docente, no varios a la vez.");
        }

    } catch (FeignException e) {
        throw new RuntimeException("Error al comunicarse con los microservicios: " + e.getMessage(), e);
    }

    // Asignar ID del Rol y guardar la inscripci√≥n
    inscripcion.setIdRol(inscripcionDTO.getIdRol());
    inscripcion.setInscripcionRol("Sin Rol");
    inscripcionesRepository.save(inscripcion);

    return inscripcion;
}
